#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define MAX_VERTICES 100
#define MAX_EDGES 100
// Structure to represent an edge
struct Edge {
     int source, destination, weight;
};
// Function to perform Bellman-Ford algorithm
void bellmanFord(int vertices, int edges, struct Edge edge[], int source) {
    int distance[MAX_VERTICES];
// Initialize distances from the source to all vertices as INFINITY
    for (int i = 0; i < vertices; i++)
     distance[i] = INT_MAX;
// Set the distance to the source as 0
      distance[source] = 0;

// Relax all edges |V| - 1 times
for (int i = 1; i <= vertices - 1; i++) {
for (int j = 0; j < edges; j++) {
int u = edge[j].source;
int v = edge[j].destination;
int weight = edge[j].weight;
if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
distance[v] = distance[u] + weight;
}
}
}
// Check for negative weight cycles
for (int i = 0; i < edges; i++) {
int u = edge[i].source;
int v = edge[i].destination;
int weight = edge[i].weight;
if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
printf("Graph contains negative weight cycle.\n");
return;
}
}
// Print the computed distances
printf("Vertex Distance from Source\n");
for (int i = 0; i < vertices; i++) {
printf("%d\t\t%d\n", i, distance[i]);
}
}
int main() {
int vertices, edges;
printf("Enter the number of vertices: ");
scanf("%d", &vertices);
printf("Enter the number of edges: ");
scanf("%d", &edges);
struct Edge edge[MAX_EDGES];
printf("Enter the details of each edge (source, destination, weight):\n");

for (int i = 0; i < edges; i++) {
printf("Edge %d: ", i + 1);
scanf("%d %d %d", &edge[i].source, &edge[i].destination, &edge[i].weight);
}
int source;
printf("Enter the source vertex: ");
scanf("%d", &source);
bellmanFord(vertices, edges, edge, source);
return 0;
}