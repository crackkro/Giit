import java.util.*;
public class Kruskals {

    static class Edge {
        int source, destination, weight;

        Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    static class Subset {
        int parent, rank;

        Subset(int parent, int rank) {
            this.parent = parent;
            this.rank = rank;
        }
    }

    public static int find(Subset[] subsets, int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);

        return subsets[i].parent;
    }

    public static void unionSets(Subset[] subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    public static int compareEdges(Edge a, Edge b) {
        return a.weight - b.weight;
    }

    public static void kruskalMST(Edge[] edges, int V, int E) {
        Subset[] subsets = new Subset[V];
        for (int v = 0; v < V; v++) {
            subsets[v] = new Subset(v, 0);
        }

        Arrays.sort(edges, (a, b) -> compareEdges(a, b));

        System.out.println("Minimum Spanning Tree:");

        int i = 0;
        int mstIndex = 0;
        int totalWeight = 0;

        while (mstIndex < V - 1) {
            Edge nextEdge = edges[i++];

            int x = find(subsets, nextEdge.source);
            int y = find(subsets, nextEdge.destination);

            if (x != y) {
                System.out.printf("(%d, %d, %d)   Weight: %d\n", nextEdge.source, nextEdge.destination, nextEdge.weight, nextEdge.weight);
                unionSets(subsets, x, y);
                totalWeight += nextEdge.weight;
                mstIndex++;
            }
        }

        System.out.printf("Total Weight of Minimum Spanning Tree: %d\n", totalWeight);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();

        System.out.print("Enter the number of edges: ");
        int E = scanner.nextInt();

        Edge[] edges = new Edge[E];
        for (int i = 0; i < E; i++) {
            System.out.printf("Enter edge %d (source destination weight): ", i + 1);
            int source = scanner.nextInt();
            int destination = scanner.nextInt();
            int weight = scanner.nextInt();
            edges[i] = new Edge(source, destination, weight);
        }

        kruskalMST(edges, V, E);

        scanner.close();
    }
}
